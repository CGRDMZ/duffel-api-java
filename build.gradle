plugins {
    id 'idea'
    id 'java'
    id 'jvm-test-suite'
    id 'maven-publish'
    id 'signing'
    id "io.freefair.lombok" version "6.5.0.3"
}

repositories {
    mavenCentral()
}

ext {
    jacksonVersion = '2.13.3'
    jacksonDatabindVersion = '2.13.3'
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.mock-server:mockserver-junit-jupiter-no-dependencies:5.13.2'
    testImplementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.18.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    filter {
        // Don't execute the examples by default, as these create test orders and need a token to run
        excludeTestsMatching("com.duffel.example.*")
    }
}

testing {
    suites {
        test {}

        example(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST
            dependencies {
                implementation project
            }

            sources {
                java {
                    srcDirs = ["src/test/java/com/duffel/example"]
                }
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

configurations {
    exampleImplementation.extendsFrom(testImplementation)
    exampleRuntimeOnly.extendsFrom(testRuntimeOnly)
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Duffel SDK'
                description = 'Java SDK for Duffel'
                url = 'http://www.duffel.com'

                scm {
                    url = 'https://github.com/duffelhq/duffel-api-java'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/duffelhq/duffel-api-java/blob/main/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'Duffel'
                        name = 'Duffel'
                        email = 'client-libraries@duffel.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty("sonatypeUsername")
                password = findProperty("sonatypePassword")
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    options.addBooleanOption('html5', true)
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group = "com.duffel"
archivesBaseName = "duffel-sdk"
version = "0.0.1"
